generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GreenHouse {
  GID          Int     @id @default(autoincrement())
  name        String
  location    String

  sensors     Sensor[]
  controllers Controller[]
  userSubscribe UserGreenhouse[]
}

model User {
  ID        Int    @id @default(autoincrement())
  email     String @unique @db.VarChar(100)
  password  String @db.VarChar(100)
  username  String @db.VarChar(100)
  useEmail4Noti Boolean @default(true)

  greenhouseList UserGreenhouse[]
  controllerRecord ControllerRecord[]
  controller      Controller[] 
  sensor         Sensor[]
  scheduler      Scheduler[]
  notification   Notification[]
}

model UserGreenhouse {
  userId Int
  greenhouseId Int

  user User @relation(fields: [userId], references: [ID], onDelete: Cascade, onUpdate: Cascade)
  greenhouse GreenHouse @relation(fields: [greenhouseId], references: [GID],  onDelete: Cascade, onUpdate: Cascade)
  @@id([userId , greenhouseId])
}

model Sensor {
  SID           Int           @id @default(autoincrement())
  maxValue      Int?
  deviceType    String
  sensorType    String
  value         Float         @default(0)
  topic         String        @unique

  records     SensorRecord[]

  greenHouse  GreenHouse    @relation(fields: [greenHouseID], references: [GID])
  greenHouseID Int

  user        User         @relation(fields: [userID], references: [ID])
  userID      Int
}

model SensorRecord {
  SRID          Int         @id @default(autoincrement())
  value         Float
  dateCreated   DateTime

  device      Sensor        @relation(fields: [deviceID] , references: [SID], onDelete: Cascade, onUpdate: Cascade)
  deviceID      Int
}

model Controller {
  CID           Int           @id @default(autoincrement())
  deviceType          String
  controllerType      String
  status        Int           @default(0) // 0: off, 1: on
  value         Int           @default(0) // between 0-100
  topic         String        @unique
  records     ControllerRecord[]

  greenHouse  GreenHouse    @relation(fields: [greenHouseID], references: [GID])
  greenHouseID Int

  user        User         @relation(fields: [userID], references: [ID])
  userID      Int

  controllerScheduler ControllerScheduler[]
}

model ControllerRecord {
  CRID          Int         @id @default(autoincrement())
  status        Int           @default(0) // 0: off, 1: on
  value         Int           @default(0) // between 0-100
  dateCreated   DateTime
  auto          Boolean       @default(false)

  device      Controller    @relation(fields: [deviceID] , references: [CID], onDelete: Cascade, onUpdate: Cascade)
  deviceID    Int

  user        User?         @relation(fields: [userID], references: [ID])
  userID      Int?
}

model Scheduler {
  SID           Int           @id @default(autoincrement())
  timeCreated   DateTime
  timeUpdated   DateTime
  value         Int           @default(0) 
  timeStart     DateTime
  duration      Int         
  recurrenceRule  RECURENCERULE @default(NOT_REPEAT)
  recurrenceEnd   DateTime?      

  user       User         @relation(fields: [userID], references: [ID])
  userID     Int
  controllerScheduler ControllerScheduler[]
}

enum RECURENCERULE {
  NOT_REPEAT
  MONTHLY
  WEEKLY
  DAILY
}

model ControllerScheduler {
  device      Controller    @relation(fields: [deviceID] , references: [CID], onDelete: Cascade, onUpdate: Cascade)
  deviceID    Int

  scheduler   Scheduler    @relation(fields: [schedulerID] , references: [SID], onDelete: Cascade, onUpdate: Cascade)
  schedulerID Int

  @@id([deviceID, schedulerID])
}

model Notification {
  NID           Int           @id @default(autoincrement())
  message       String
  dateCreated   DateTime
  isRead        Boolean

  user        User         @relation(fields: [userID], references: [ID], onDelete: Cascade, onUpdate: Cascade)
  userID      Int
}